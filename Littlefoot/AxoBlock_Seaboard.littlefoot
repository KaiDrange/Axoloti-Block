/*
<metadata description="Seaboard Block script for AxoBlock project" target="Seaboard" tags="Default;MPE;MIDI;Melodic">
<modes>
  <mode name="AxoBlock"/>
</modes>


</metadata>
*/


/*
Toggle MPE mode and channel 1 with mode key
Midi CC 80 on channel 1 sets midi channel. 0 = MPE
Midi CC 81 on channel 1 sets Piano Mode. 0 = Piano mode off, 1 = on (and turns expression on/off as well)
*/

const float octaveDownXloc = 0.0;
const float octaveDownYloc = 0.0;

const float octaveUpXloc = 5.75;
const float octaveUpYloc = 0.0;

const float octaveSwitchXSize = 0.3;
const float octaveSwitchYSize = 0.2;

bool shiftMode;
int  presetIndex;
int  topOctaveShift;
int  clusterWidthLast;
int  xPos;
bool settingsRequested;

void initialise()
{
    setLocalConfigActiveState (0, true, true);
	setLocalConfigActiveState (1, true, true);
	setLocalConfigActiveState (2, true, true);
	setLocalConfigActiveState (3, true, true);
	setLocalConfigActiveState (4, true, true);
	setLocalConfigActiveState (5, true, false);
	setLocalConfigActiveState (6, true, true);
	setLocalConfigActiveState (7, true, true);
	setLocalConfigActiveState (10, true, true);
	setLocalConfigActiveState (11, true, true);
	setLocalConfigActiveState (12, true, true);
	setLocalConfigActiveState (13, true, true);
	setLocalConfigActiveState (14, true, true);
	setLocalConfigActiveState (15, true, true);
	setLocalConfigActiveState (16, true, true);
	setLocalConfigActiveState (17, true, true);
	setLocalConfigActiveState (18, true, true);
	setLocalConfigActiveState (30, true, true);
	setLocalConfigActiveState (31, true, true);
	setLocalConfigActiveState (32, true, true);
    
    setLocalConfigItemRange (4, -4, 6);
    shiftMode = false;
    presetIndex = 0;
    topOctaveShift = 255;
    clusterWidthLast = 1;
    updateTopologyShift();
    settingsRequested = false;
}

void sendConfigItemToCluster (int itemId)
{
    if (getClusterWidth() < 2)
        return;
    
    int numBlocksInCluster = getNumBlocksInCurrentCluster();
    
    for (int i = 0; i < numBlocksInCluster; ++i)
        setRemoteConfig (getBlockIdForBlockInCluster(i), itemId, getLocalConfig (itemId));
}

void updateTopologyShift ()
{
    if (getClusterWidth() > 1)
    {
        int newTopOct = 0;

        int octStart = ((getClusterWidth() - 1) / 2);    
        newTopOct = (getClusterXpos() - octStart) * 2;
        
        if (topOctaveShift != newTopOct)
        {
            topOctaveShift = newTopOct;
            setLocalConfig (8, topOctaveShift);
        }
        if ((! getClusterXpos() && ! isMasterInCurrentCluster()) || (isMasterInCurrentCluster() && isMasterBlock()))
		{
			if (clusterWidthLast != getClusterWidth() || xPos != getClusterXpos())
			{
				clusterWidthLast = getClusterWidth();				
				sendConfigItemToCluster (4);
			}
		}
		
		xPos = getClusterXpos();
    }
    else if (topOctaveShift != 0)
    {
        topOctaveShift = 0;
        setLocalConfig (8, topOctaveShift);
    }
}

void repaint()
{
    updateTopologyShift();
    
    if (! getBlockIDOnPort(0))
    {
        fillPixel (0x404040, 0, 0);
        fillPixel (0x404040, 1, 0);
    }
    else
    {
        fillPixel (0, 0, 0);
        fillPixel (0, 1, 0);
    }
    
    if (!settingsRequested && isConnectedToHost()) {
        sendCC(0, 61, 100);
        settingsRequested = true;
    }
}

void touchStart (int index, float x, float y, float z, float vz)
{
    // Handle octave switches
    if (x >= octaveDownXloc && x <= octaveDownXloc + octaveSwitchXSize && 
        y >= octaveDownYloc && y <= octaveDownYloc + octaveSwitchYSize)
    {
        if (shiftMode && presetIndex)
            sendMIDI (0xC0, --presetIndex);
        else
        {
            setLocalConfig (4, getLocalConfig (4) - 1);
        }
    }
    else if (x >= octaveUpXloc && x <= octaveUpXloc + octaveSwitchXSize && 
             y >= octaveUpYloc && y <= octaveUpYloc + octaveSwitchYSize)
    {
        if (shiftMode && presetIndex < 127)
            sendMIDI (0xC0, ++presetIndex);
        else
        {
            setLocalConfig (4, getLocalConfig (4) + 1);
        }
    }
    else
    {    
        // All other touches are treated as seaboard playing
        handleTouchAsSeaboard (index);
    }
}

void handleRequest (int id, int blockID)
{
    if (id == 0)    sendMessageToBlock (blockID, 0x783E, 0, getBlockIDForIndex (0));
}

void handleMessage (int data0, int data1, int data2)
{
    if (data0 == 0x783C)   handleRequest (data1, data2);   // Request message
}


void handleButtonDown (int index)
{
    if (index == 0) {
        shiftMode = true;
        getLocalConfig(2) == 0 ? setChannelMode(0) : setChannelMode(1);
    }
}

void handleButtonUp (int index)
{
    if (index == 0) shiftMode = false;
}

void setChannelMode(int midiChannel) {
    if (midiChannel == 0) {
        setLocalConfig(0, 2); // start channel
        setLocalConfig(1, 16); // end channel
        setLocalConfig(2, 1); // MPE on
    }
    else if (midiChannel > 0 && midiChannel <= 16) {
        setLocalConfig(2, 0); // MPE off
        setLocalConfig(0, midiChannel); // start channel
        setLocalConfig(1, midiChannel); // end channel
    }
}

void enablePianoMode(bool enable) {
    if (enable) {
        setLocalConfig(17, 1); // Piano mode (i.e. slides trigger new notes)
        setLocalConfig(11, 0); // Glide sensitivity
        setLocalConfig(12, 0); // Slide sensitivity
        setLocalConfig(13, 0); // Pressure sensitivity
    }
    else {
        setLocalConfig(17, 0); // Piano mode (i.e. slides trigger new notes)
        setLocalConfig(11, 102); // Glide sensitivity
        setLocalConfig(12, 127); // Slide sensitivity
        setLocalConfig(13, 127); // Pressure sensitivity    
    }
    
}

void handleMIDI(int byte0, int byte1, int byte2) {
    // use CC #80 on midi channel 0 to set midi channel. Value 0 means MPE Mode
    int channel = (byte0 & 0xF) + 1;
    int command = byte0 >> 4;
    if (channel == 1 && command == 11) { // 11 = midi CC command
        if (byte1 == 80) {
            setChannelMode(byte2);
        }
        else if (byte1 == 81) {
            enablePianoMode(byte2 > 0 ? true : false);
        }
    }
}

